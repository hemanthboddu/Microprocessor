$date
  Tue Nov  8 11:18:09 2016
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 1 ! clock $end
$var reg 1 " reset $end
$scope module dut $end
$var reg 1 # clock $end
$var reg 1 $ reset $end
$var reg 1 % pcwrite $end
$var reg 1 & rfwrite $end
$var reg 1 ' irwrite $end
$var reg 1 ( memwrite $end
$var reg 1 ) memread $end
$var reg 2 * alu_op[1:0] $end
$var reg 1 + mux_mem_data $end
$var reg 2 , mux_mem_addr[1:0] $end
$var reg 1 - mux_a3 $end
$var reg 1 . mux_a2 $end
$var reg 2 / mux_a1[1:0] $end
$var reg 1 0 mux_a $end
$var reg 2 1 mux_b[1:0] $end
$var reg 2 2 mux_d3[1:0] $end
$var reg 2 3 mux_pc[1:0] $end
$var reg 1 4 mux_pe_tmp $end
$var reg 1 5 mux_before_a $end
$var reg 1 6 enable_alu $end
$var reg 1 7 enable_a $end
$var reg 1 8 enable_b $end
$var reg 1 9 enable_c $end
$var reg 1 : enable_mdr $end
$var reg 1 ; enable_pe_tmp $end
$var reg 1 < enable_pe_out $end
$var reg 1 = enable_pe_flag $end
$var reg 1 > enable_eqflag $end
$var reg 1 ? enable_carry_flag $end
$var reg 1 @ enable_z_flag $end
$var reg 1 A enable_pe $end
$var reg 1 B enable_pe_1_3 $end
$var reg 1 C se_6_16 $end
$var reg 1 D se_9_16 $end
$var reg 1 E ze_9_16 $end
$var reg 1 F carry $end
$var reg 1 G z $end
$var reg 1 H eqflag $end
$var reg 1 I pe_flag $end
$var reg 4 J opcode[3:0] $end
$var reg 2 K cz[1:0] $end
$scope module dut1 $end
$var reg 1 L clock $end
$var reg 1 M pcwrite $end
$var reg 1 N rfwrite $end
$var reg 1 O irwrite $end
$var reg 1 P memwrite $end
$var reg 1 Q memread $end
$var reg 2 R alu_op[1:0] $end
$var reg 1 S mux_mem_data $end
$var reg 2 T mux_mem_addr[1:0] $end
$var reg 1 U mux_a3 $end
$var reg 1 V mux_a2 $end
$var reg 2 W mux_a1[1:0] $end
$var reg 1 X mux_a $end
$var reg 2 Y mux_b[1:0] $end
$var reg 2 Z mux_d3[1:0] $end
$var reg 2 [ mux_pc[1:0] $end
$var reg 1 \ mux_pe_tmp $end
$var reg 1 ] mux_before_a $end
$var reg 1 ^ enable_alu $end
$var reg 1 _ enable_a $end
$var reg 1 ` enable_b $end
$var reg 1 a enable_c $end
$var reg 1 b enable_mdr $end
$var reg 1 c enable_pe_tmp $end
$var reg 1 d enable_pe_out $end
$var reg 1 e enable_pe_flag $end
$var reg 1 f enable_eqflag $end
$var reg 1 g enable_carry_flag $end
$var reg 1 h enable_z_flag $end
$var reg 1 i enable_pe $end
$var reg 1 j enable_pe_1_3 $end
$var reg 1 k se_6_16 $end
$var reg 1 l se_9_16 $end
$var reg 1 m ze_9_16 $end
$var reg 1 n carry $end
$var reg 1 o z $end
$var reg 1 p eqflag $end
$var reg 1 q pe_flag $end
$var reg 4 r opcode[3:0] $end
$var reg 2 s cz[1:0] $end
$var reg 16 t alu_in1[15:0] $end
$var reg 16 u alu_in2[15:0] $end
$var reg 16 v alu_o[15:0] $end
$var reg 16 w a_rego[15:0] $end
$var reg 16 x b_rego[15:0] $end
$var reg 16 y c_rego[15:0] $end
$var reg 16 z pc_in[15:0] $end
$var reg 16 { rf_d1[15:0] $end
$var reg 16 | rf_d2[15:0] $end
$var reg 16 } rf_d3[15:0] $end
$var reg 16 !" a_regi[15:0] $end
$var reg 3 "" rfa1[2:0] $end
$var reg 3 #" rfa2[2:0] $end
$var reg 3 $" rfa3[2:0] $end
$var reg 16 %" mem_ar[15:0] $end
$var reg 16 &" mem_dw[15:0] $end
$var reg 16 '" mem_out[15:0] $end
$var reg 6 (" im6[5:0] $end
$var reg 9 )" im9[8:0] $end
$var reg 16 *" se6o[15:0] $end
$var reg 16 +" se9o[15:0] $end
$var reg 16 ," ze9o[15:0] $end
$var reg 16 -" mdro[15:0] $end
$var reg 16 ." pc_o[15:0] $end
$var reg 3 /" data_out1[2:0] $end
$var reg 3 0" a2[2:0] $end
$var reg 3 1" a3[2:0] $end
$var reg 3 2" pe_out_1[2:0] $end
$var reg 3 3" pe_out[2:0] $end
$var reg 8 4" pe_in[7:0] $end
$var reg 8 5" pe_out_tmp[7:0] $end
$var reg 8 6" im8[7:0] $end
$var reg 8 7" pe_ireg[7:0] $end
$var reg 8 8" petmp[7:0] $end
$var reg 1 9" pe_flagin $end
$var reg 1 :" carry_alu $end
$var reg 1 ;" z_alu $end
$var reg 1 <" eqflag_alu $end
$scope module muxmdr_d3 $end
$var reg 16 =" a0[15:0] $end
$var reg 16 >" a1[15:0] $end
$var reg 16 ?" a2[15:0] $end
$var reg 2 @" control[1:0] $end
$var reg 16 A" c[15:0] $end
$upscope $end
$scope module muxmem_ar $end
$var reg 16 B" a0[15:0] $end
$var reg 16 C" a1[15:0] $end
$var reg 16 D" a2[15:0] $end
$var reg 2 E" control[1:0] $end
$var reg 16 F" c[15:0] $end
$upscope $end
$scope module pc_in1 $end
$var reg 16 G" a0[15:0] $end
$var reg 16 H" a1[15:0] $end
$var reg 16 I" a2[15:0] $end
$var reg 2 J" control[1:0] $end
$var reg 16 K" c[15:0] $end
$upscope $end
$scope module muxir_a1 $end
$var reg 3 L" a0[2:0] $end
$var reg 3 M" a1[2:0] $end
$var reg 3 N" a2[2:0] $end
$var reg 2 O" control[1:0] $end
$var reg 3 P" c[2:0] $end
$upscope $end
$scope module muxb_alu_b $end
$var reg 16 Q" a0[15:0] $end
$var reg 16 R" a1[15:0] $end
$var reg 16 S" a2[15:0] $end
$var reg 16 T" a3[15:0] $end
$var reg 2 U" control[1:0] $end
$var reg 16 V" c[15:0] $end
$upscope $end
$scope module muxmem_dw $end
$var reg 16 W" a0[15:0] $end
$var reg 16 X" a1[15:0] $end
$var reg 1 Y" control $end
$var reg 16 Z" c[15:0] $end
$upscope $end
$scope module muxir_a3 $end
$var reg 3 [" a0[2:0] $end
$var reg 3 \" a1[2:0] $end
$var reg 1 ]" control $end
$var reg 3 ^" c[2:0] $end
$upscope $end
$scope module muxir_a2 $end
$var reg 3 _" a0[2:0] $end
$var reg 3 `" a1[2:0] $end
$var reg 1 a" control $end
$var reg 3 b" c[2:0] $end
$upscope $end
$scope module muxa_alu_a $end
$var reg 16 c" a0[15:0] $end
$var reg 16 d" a1[15:0] $end
$var reg 1 e" control $end
$var reg 16 f" c[15:0] $end
$upscope $end
$scope module muxd1_a $end
$var reg 16 g" a0[15:0] $end
$var reg 16 h" a1[15:0] $end
$var reg 1 i" control $end
$var reg 16 j" c[15:0] $end
$upscope $end
$scope module muxpe $end
$var reg 8 k" a0[7:0] $end
$var reg 8 l" a1[7:0] $end
$var reg 1 m" control $end
$var reg 8 n" c[7:0] $end
$upscope $end
$scope module alu1 $end
$var reg 1 o" enable $end
$var reg 16 p" a[15:0] $end
$var reg 16 q" b[15:0] $end
$var reg 16 r" alu_out[15:0] $end
$var reg 2 s" control[1:0] $end
$var reg 1 t" c $end
$var reg 1 u" z $end
$var reg 1 v" eqflag $end
$var reg 16 w" v1[15:0] $end
$var reg 16 x" v2[15:0] $end
$var reg 1 y" v3 $end
$var reg 1 z" carr $end
$scope module i1 $end
$var reg 16 {" x[15:0] $end
$var reg 16 |" y[15:0] $end
$var reg 16 }" s[15:0] $end
$var reg 1 !# carry $end
$var reg 16 "# c[16:1] $end
$scope module g1 $end
$var reg 1 ## a $end
$var reg 1 $# b $end
$var reg 1 %# sum $end
$var reg 1 &# cout $end
$upscope $end
$scope module g2 $end
$var reg 1 '# a $end
$var reg 1 (# b $end
$var reg 1 )# cin $end
$var reg 1 *# sum $end
$var reg 1 +# cout $end
$var reg 1 ,# halftohalf $end
$var reg 1 -# halftoor1 $end
$var reg 1 .# halftoor2 $end
$scope module g1 $end
$var reg 1 /# a $end
$var reg 1 0# b $end
$var reg 1 1# sum $end
$var reg 1 2# cout $end
$upscope $end
$scope module g2 $end
$var reg 1 3# a $end
$var reg 1 4# b $end
$var reg 1 5# sum $end
$var reg 1 6# cout $end
$upscope $end
$upscope $end
$scope module g3 $end
$var reg 1 7# a $end
$var reg 1 8# b $end
$var reg 1 9# cin $end
$var reg 1 :# sum $end
$var reg 1 ;# cout $end
$var reg 1 <# halftohalf $end
$var reg 1 =# halftoor1 $end
$var reg 1 ># halftoor2 $end
$scope module g1 $end
$var reg 1 ?# a $end
$var reg 1 @# b $end
$var reg 1 A# sum $end
$var reg 1 B# cout $end
$upscope $end
$scope module g2 $end
$var reg 1 C# a $end
$var reg 1 D# b $end
$var reg 1 E# sum $end
$var reg 1 F# cout $end
$upscope $end
$upscope $end
$scope module g4 $end
$var reg 1 G# a $end
$var reg 1 H# b $end
$var reg 1 I# cin $end
$var reg 1 J# sum $end
$var reg 1 K# cout $end
$var reg 1 L# halftohalf $end
$var reg 1 M# halftoor1 $end
$var reg 1 N# halftoor2 $end
$scope module g1 $end
$var reg 1 O# a $end
$var reg 1 P# b $end
$var reg 1 Q# sum $end
$var reg 1 R# cout $end
$upscope $end
$scope module g2 $end
$var reg 1 S# a $end
$var reg 1 T# b $end
$var reg 1 U# sum $end
$var reg 1 V# cout $end
$upscope $end
$upscope $end
$scope module g5 $end
$var reg 1 W# a $end
$var reg 1 X# b $end
$var reg 1 Y# cin $end
$var reg 1 Z# sum $end
$var reg 1 [# cout $end
$var reg 1 \# halftohalf $end
$var reg 1 ]# halftoor1 $end
$var reg 1 ^# halftoor2 $end
$scope module g1 $end
$var reg 1 _# a $end
$var reg 1 `# b $end
$var reg 1 a# sum $end
$var reg 1 b# cout $end
$upscope $end
$scope module g2 $end
$var reg 1 c# a $end
$var reg 1 d# b $end
$var reg 1 e# sum $end
$var reg 1 f# cout $end
$upscope $end
$upscope $end
$scope module g6 $end
$var reg 1 g# a $end
$var reg 1 h# b $end
$var reg 1 i# cin $end
$var reg 1 j# sum $end
$var reg 1 k# cout $end
$var reg 1 l# halftohalf $end
$var reg 1 m# halftoor1 $end
$var reg 1 n# halftoor2 $end
$scope module g1 $end
$var reg 1 o# a $end
$var reg 1 p# b $end
$var reg 1 q# sum $end
$var reg 1 r# cout $end
$upscope $end
$scope module g2 $end
$var reg 1 s# a $end
$var reg 1 t# b $end
$var reg 1 u# sum $end
$var reg 1 v# cout $end
$upscope $end
$upscope $end
$scope module g7 $end
$var reg 1 w# a $end
$var reg 1 x# b $end
$var reg 1 y# cin $end
$var reg 1 z# sum $end
$var reg 1 {# cout $end
$var reg 1 |# halftohalf $end
$var reg 1 }# halftoor1 $end
$var reg 1 !$ halftoor2 $end
$scope module g1 $end
$var reg 1 "$ a $end
$var reg 1 #$ b $end
$var reg 1 $$ sum $end
$var reg 1 %$ cout $end
$upscope $end
$scope module g2 $end
$var reg 1 &$ a $end
$var reg 1 '$ b $end
$var reg 1 ($ sum $end
$var reg 1 )$ cout $end
$upscope $end
$upscope $end
$scope module g8 $end
$var reg 1 *$ a $end
$var reg 1 +$ b $end
$var reg 1 ,$ cin $end
$var reg 1 -$ sum $end
$var reg 1 .$ cout $end
$var reg 1 /$ halftohalf $end
$var reg 1 0$ halftoor1 $end
$var reg 1 1$ halftoor2 $end
$scope module g1 $end
$var reg 1 2$ a $end
$var reg 1 3$ b $end
$var reg 1 4$ sum $end
$var reg 1 5$ cout $end
$upscope $end
$scope module g2 $end
$var reg 1 6$ a $end
$var reg 1 7$ b $end
$var reg 1 8$ sum $end
$var reg 1 9$ cout $end
$upscope $end
$upscope $end
$scope module g9 $end
$var reg 1 :$ a $end
$var reg 1 ;$ b $end
$var reg 1 <$ cin $end
$var reg 1 =$ sum $end
$var reg 1 >$ cout $end
$var reg 1 ?$ halftohalf $end
$var reg 1 @$ halftoor1 $end
$var reg 1 A$ halftoor2 $end
$scope module g1 $end
$var reg 1 B$ a $end
$var reg 1 C$ b $end
$var reg 1 D$ sum $end
$var reg 1 E$ cout $end
$upscope $end
$scope module g2 $end
$var reg 1 F$ a $end
$var reg 1 G$ b $end
$var reg 1 H$ sum $end
$var reg 1 I$ cout $end
$upscope $end
$upscope $end
$scope module g10 $end
$var reg 1 J$ a $end
$var reg 1 K$ b $end
$var reg 1 L$ cin $end
$var reg 1 M$ sum $end
$var reg 1 N$ cout $end
$var reg 1 O$ halftohalf $end
$var reg 1 P$ halftoor1 $end
$var reg 1 Q$ halftoor2 $end
$scope module g1 $end
$var reg 1 R$ a $end
$var reg 1 S$ b $end
$var reg 1 T$ sum $end
$var reg 1 U$ cout $end
$upscope $end
$scope module g2 $end
$var reg 1 V$ a $end
$var reg 1 W$ b $end
$var reg 1 X$ sum $end
$var reg 1 Y$ cout $end
$upscope $end
$upscope $end
$scope module g11 $end
$var reg 1 Z$ a $end
$var reg 1 [$ b $end
$var reg 1 \$ cin $end
$var reg 1 ]$ sum $end
$var reg 1 ^$ cout $end
$var reg 1 _$ halftohalf $end
$var reg 1 `$ halftoor1 $end
$var reg 1 a$ halftoor2 $end
$scope module g1 $end
$var reg 1 b$ a $end
$var reg 1 c$ b $end
$var reg 1 d$ sum $end
$var reg 1 e$ cout $end
$upscope $end
$scope module g2 $end
$var reg 1 f$ a $end
$var reg 1 g$ b $end
$var reg 1 h$ sum $end
$var reg 1 i$ cout $end
$upscope $end
$upscope $end
$scope module g12 $end
$var reg 1 j$ a $end
$var reg 1 k$ b $end
$var reg 1 l$ cin $end
$var reg 1 m$ sum $end
$var reg 1 n$ cout $end
$var reg 1 o$ halftohalf $end
$var reg 1 p$ halftoor1 $end
$var reg 1 q$ halftoor2 $end
$scope module g1 $end
$var reg 1 r$ a $end
$var reg 1 s$ b $end
$var reg 1 t$ sum $end
$var reg 1 u$ cout $end
$upscope $end
$scope module g2 $end
$var reg 1 v$ a $end
$var reg 1 w$ b $end
$var reg 1 x$ sum $end
$var reg 1 y$ cout $end
$upscope $end
$upscope $end
$scope module g13 $end
$var reg 1 z$ a $end
$var reg 1 {$ b $end
$var reg 1 |$ cin $end
$var reg 1 }$ sum $end
$var reg 1 !% cout $end
$var reg 1 "% halftohalf $end
$var reg 1 #% halftoor1 $end
$var reg 1 $% halftoor2 $end
$scope module g1 $end
$var reg 1 %% a $end
$var reg 1 &% b $end
$var reg 1 '% sum $end
$var reg 1 (% cout $end
$upscope $end
$scope module g2 $end
$var reg 1 )% a $end
$var reg 1 *% b $end
$var reg 1 +% sum $end
$var reg 1 ,% cout $end
$upscope $end
$upscope $end
$scope module g14 $end
$var reg 1 -% a $end
$var reg 1 .% b $end
$var reg 1 /% cin $end
$var reg 1 0% sum $end
$var reg 1 1% cout $end
$var reg 1 2% halftohalf $end
$var reg 1 3% halftoor1 $end
$var reg 1 4% halftoor2 $end
$scope module g1 $end
$var reg 1 5% a $end
$var reg 1 6% b $end
$var reg 1 7% sum $end
$var reg 1 8% cout $end
$upscope $end
$scope module g2 $end
$var reg 1 9% a $end
$var reg 1 :% b $end
$var reg 1 ;% sum $end
$var reg 1 <% cout $end
$upscope $end
$upscope $end
$scope module g15 $end
$var reg 1 =% a $end
$var reg 1 >% b $end
$var reg 1 ?% cin $end
$var reg 1 @% sum $end
$var reg 1 A% cout $end
$var reg 1 B% halftohalf $end
$var reg 1 C% halftoor1 $end
$var reg 1 D% halftoor2 $end
$scope module g1 $end
$var reg 1 E% a $end
$var reg 1 F% b $end
$var reg 1 G% sum $end
$var reg 1 H% cout $end
$upscope $end
$scope module g2 $end
$var reg 1 I% a $end
$var reg 1 J% b $end
$var reg 1 K% sum $end
$var reg 1 L% cout $end
$upscope $end
$upscope $end
$scope module g16 $end
$var reg 1 M% a $end
$var reg 1 N% b $end
$var reg 1 O% cin $end
$var reg 1 P% sum $end
$var reg 1 Q% cout $end
$var reg 1 R% halftohalf $end
$var reg 1 S% halftoor1 $end
$var reg 1 T% halftoor2 $end
$scope module g1 $end
$var reg 1 U% a $end
$var reg 1 V% b $end
$var reg 1 W% sum $end
$var reg 1 X% cout $end
$upscope $end
$scope module g2 $end
$var reg 1 Y% a $end
$var reg 1 Z% b $end
$var reg 1 [% sum $end
$var reg 1 \% cout $end
$upscope $end
$upscope $end
$upscope $end
$scope module i2 $end
$var reg 16 ]% a[15:0] $end
$var reg 16 ^% b[15:0] $end
$var reg 16 _% alu_out[15:0] $end
$upscope $end
$scope module i3 $end
$var reg 16 `% a[15:0] $end
$var reg 16 a% b[15:0] $end
$var reg 1 b% z $end
$upscope $end
$upscope $end
$scope module pe $end
$var reg 8 c% x[7:0] $end
$var reg 1 d% enable $end
$var reg 3 e% s[2:0] $end
$var reg 1 f% n $end
$var reg 8 g% y[7:0] $end
$upscope $end
$scope module reg_peo $end
$var reg 3 h% data_in[2:0] $end
$var reg 3 i% data_out[2:0] $end
$var reg 1 j% clock $end
$var reg 1 k% enable $end
$upscope $end
$scope module reg_carry $end
$var reg 1 l% data_in $end
$var reg 1 m% data_out $end
$var reg 1 n% clock $end
$var reg 1 o% enable $end
$upscope $end
$scope module reg_z $end
$var reg 1 p% data_in $end
$var reg 1 q% data_out $end
$var reg 1 r% clock $end
$var reg 1 s% enable $end
$upscope $end
$scope module reg_eqf $end
$var reg 1 t% data_in $end
$var reg 1 u% data_out $end
$var reg 1 v% clock $end
$var reg 1 w% enable $end
$upscope $end
$scope module reg8_pein $end
$var reg 8 x% data_in[7:0] $end
$var reg 8 y% data_out[7:0] $end
$var reg 1 z% clock $end
$var reg 1 {% enable $end
$upscope $end
$scope module reg_8petmp $end
$var reg 8 |% data_in[7:0] $end
$var reg 8 }% data_out[7:0] $end
$var reg 1 !& clock $end
$var reg 1 "& enable $end
$upscope $end
$scope module regpef $end
$var reg 1 #& data_in $end
$var reg 1 $& data_out $end
$var reg 1 %& clock $end
$var reg 1 && enable $end
$upscope $end
$scope module rega $end
$var reg 16 '& data_in[15:0] $end
$var reg 16 (& data_out[15:0] $end
$var reg 1 )& clock $end
$var reg 1 *& enable $end
$upscope $end
$scope module regb $end
$var reg 16 +& data_in[15:0] $end
$var reg 16 ,& data_out[15:0] $end
$var reg 1 -& clock $end
$var reg 1 .& enable $end
$upscope $end
$scope module regc $end
$var reg 16 /& data_in[15:0] $end
$var reg 16 0& data_out[15:0] $end
$var reg 1 1& clock $end
$var reg 1 2& enable $end
$upscope $end
$scope module mdr $end
$var reg 16 3& data_in[15:0] $end
$var reg 16 4& data_out[15:0] $end
$var reg 1 5& clock $end
$var reg 1 6& enable $end
$upscope $end
$scope module ir_reg_1 $end
$var reg 16 7& data_in[15:0] $end
$var reg 3 8& data_out1[2:0] $end
$var reg 3 9& data_out2[2:0] $end
$var reg 3 :& data_out3[2:0] $end
$var reg 2 ;& cz[1:0] $end
$var reg 4 <& opcode[3:0] $end
$var reg 6 =& im6[5:0] $end
$var reg 9 >& im9[8:0] $end
$var reg 8 ?& im8[7:0] $end
$var reg 1 @& clock $end
$var reg 1 A& enable $end
$upscope $end
$scope module reg_file_1 $end
$var reg 3 B& data_add1[2:0] $end
$var reg 3 C& data_add2[2:0] $end
$var reg 3 D& write_add[2:0] $end
$var reg 16 E& data_out1[15:0] $end
$var reg 16 F& data_out2[15:0] $end
$var reg 16 G& write_data[15:0] $end
$var reg 1 H& flag $end
$var reg 16 I& pc_in[15:0] $end
$var reg 16 J& pc_out[15:0] $end
$var reg 1 K& pcwrite $end
$var reg 1 L& clk $end
$comment temp is not handled $end
$upscope $end
$scope module memory_1 $end
$var reg 16 M& address[15:0] $end
$var reg 16 N& data_in[15:0] $end
$var reg 16 O& data_out[15:0] $end
$var reg 1 P& write_enable $end
$var reg 1 Q& read_enable $end
$var reg 1 R& clock $end
$comment memory_block is not handled $end
$upscope $end
$scope module zeroext $end
$var reg 9 S& a[8:0] $end
$var reg 16 T& alu_out[15:0] $end
$var reg 1 U& enable $end
$upscope $end
$scope module signext9 $end
$var reg 9 V& a[8:0] $end
$var reg 1 W& enable $end
$var reg 16 X& alu_out[15:0] $end
$upscope $end
$scope module signext6 $end
$var reg 6 Y& a[5:0] $end
$var reg 1 Z& enable $end
$var reg 16 [& alu_out[15:0] $end
$upscope $end
$upscope $end
$scope module dut2 $end
$var reg 1 \& clock $end
$var reg 1 ]& reset $end
$var reg 1 ^& pcwrite $end
$var reg 1 _& rfwrite $end
$var reg 1 `& irwrite $end
$var reg 1 a& memread $end
$var reg 1 b& memwrite $end
$var reg 2 c& alu_op[1:0] $end
$var reg 1 d& mux_mem_data $end
$var reg 2 e& mux_mem_addr[1:0] $end
$var reg 1 f& mux_a3 $end
$var reg 1 g& mux_a2 $end
$var reg 2 h& mux_a1[1:0] $end
$var reg 1 i& mux_a $end
$var reg 2 j& mux_b[1:0] $end
$var reg 2 k& mux_d3[1:0] $end
$var reg 2 l& mux_pc[1:0] $end
$var reg 1 m& mux_pe_tmp $end
$var reg 1 n& mux_before_a $end
$var reg 1 o& enable_alu $end
$var reg 1 p& enable_a $end
$var reg 1 q& enable_b $end
$var reg 1 r& enable_c $end
$var reg 1 s& enable_mdr $end
$var reg 1 t& enable_pe_tmp $end
$var reg 1 u& enable_pe_out $end
$var reg 1 v& enable_pe_flag $end
$var reg 1 w& enable_eqflag $end
$var reg 1 x& enable_carry_flag $end
$var reg 1 y& enable_z_flag $end
$var reg 1 z& enable_pe $end
$var reg 1 {& enable_pe_1_3 $end
$var reg 1 |& se_6_16 $end
$var reg 1 }& se_9_16 $end
$var reg 1 !' ze_9_16 $end
$var reg 1 "' carry $end
$var reg 1 #' z $end
$var reg 1 $' eqflag $end
$var reg 1 %' pe_flag $end
$var reg 4 &' op_code[3:0] $end
$var reg 2 '' cz[1:0] $end
$comment state_signal is not handled $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
1!
1"
1#
1$
0%
0&
0'
0(
0)
b00 *
0+
b00 ,
0-
0.
b00 /
00
b00 1
b00 2
b00 3
04
05
06
07
08
09
0:
0;
0<
0=
0>
0?
0@
0A
0B
0C
0D
0E
UF
UG
UH
UI
bUUUU J
bUU K
1L
0M
0N
0O
0P
0Q
b00 R
0S
b00 T
0U
0V
b00 W
0X
b00 Y
b00 Z
b00 [
0\
0]
0^
0_
0`
0a
0b
0c
0d
0e
0f
0g
0h
0i
0j
0k
0l
0m
Un
Uo
Up
Uq
bUUUU r
bUU s
bUUUUUUUUUUUUUUUU t
b0000000000000001 u
b0000000000000000 v
bUUUUUUUUUUUUUUUU w
bUUUUUUUUUUUUUUUU x
bUUUUUUUUUUUUUUUU y
b0000000000000000 z
bUUUUUUUUUUUUUUUU {
bUUUUUUUUUUUUUUUU |
bUUUUUUUUUUUUUUUU }
bUUUUUUUUUUUUUUUU !"
bUUU ""
bUUU #"
bUUU $"
bUUUUUUUUUUUUUUUU %"
bUUUUUUUUUUUUUUUU &"
bUUUUUUUUUUUUUUUU '"
bUUUUUU ("
bUUUUUUUUU )"
bUUUUUUUUUUUUUUUU *"
bUUUUUUUUUUUUUUUU +"
bUUUUUUUUUUUUUUUU ,"
bUUUUUUUUUUUUUUUU -"
bUUUUUUUUUUUUUUUU ."
bUUU /"
bUUU 0"
bUUU 1"
b000 2"
bUUU 3"
bUUUUUUUU 4"
b00000000 5"
bUUUUUUUU 6"
bUUUUUUUU 7"
bUUUUUUUU 8"
09"
0:"
0;"
0<"
bUUUUUUUUUUUUUUUU ="
bUUUUUUUUUUUUUUUU >"
bUUUUUUUUUUUUUUUU ?"
b00 @"
bUUUUUUUUUUUUUUUU A"
bUUUUUUUUUUUUUUUU B"
bUUUUUUUUUUUUUUUU C"
bUUUUUUUUUUUUUUUU D"
b00 E"
bUUUUUUUUUUUUUUUU F"
b0000000000000000 G"
bUUUUUUUUUUUUUUUU H"
bUUUUUUUUUUUUUUUU I"
b00 J"
b0000000000000000 K"
bUUU L"
bUUU M"
bUUU N"
b00 O"
bUUU P"
b0000000000000001 Q"
bUUUUUUUUUUUUUUUU R"
bUUUUUUUUUUUUUUUU S"
bUUUUUUUUUUUUUUUU T"
b00 U"
b0000000000000001 V"
bUUUUUUUUUUUUUUUU W"
bUUUUUUUUUUUUUUUU X"
0Y"
bUUUUUUUUUUUUUUUU Z"
bUUU ["
bUUU \"
0]"
bUUU ^"
bUUU _"
bUUU `"
0a"
bUUU b"
bUUUUUUUUUUUUUUUU c"
bUUUUUUUUUUUUUUUU d"
0e"
bUUUUUUUUUUUUUUUU f"
bUUUUUUUUUUUUUUUU g"
bUUUUUUUUUUUUUUUU h"
0i"
bUUUUUUUUUUUUUUUU j"
bUUUUUUUU k"
bUUUUUUUU l"
0m"
bUUUUUUUU n"
0o"
bUUUUUUUUUUUUUUUU p"
b0000000000000001 q"
b0000000000000000 r"
b00 s"
0t"
0u"
0v"
bUUUUUUUUUUUUUUUU w"
b111111111111111U x"
1y"
Uz"
bUUUUUUUUUUUUUUUU {"
b0000000000000001 |"
bUUUUUUUUUUUUUUUU }"
U!#
bUUUUUUUUUUUUUUUU "#
U##
1$#
U%#
U&#
U'#
0(#
U)#
U*#
U+#
U,#
0-#
U.#
U/#
00#
U1#
02#
U3#
U4#
U5#
U6#
U7#
08#
U9#
U:#
U;#
U<#
0=#
U>#
U?#
0@#
UA#
0B#
UC#
UD#
UE#
UF#
UG#
0H#
UI#
UJ#
UK#
UL#
0M#
UN#
UO#
0P#
UQ#
0R#
US#
UT#
UU#
UV#
UW#
0X#
UY#
UZ#
U[#
U\#
0]#
U^#
U_#
0`#
Ua#
0b#
Uc#
Ud#
Ue#
Uf#
Ug#
0h#
Ui#
Uj#
Uk#
Ul#
0m#
Un#
Uo#
0p#
Uq#
0r#
Us#
Ut#
Uu#
Uv#
Uw#
0x#
Uy#
Uz#
U{#
U|#
0}#
U!$
U"$
0#$
U$$
0%$
U&$
U'$
U($
U)$
U*$
0+$
U,$
U-$
U.$
U/$
00$
U1$
U2$
03$
U4$
05$
U6$
U7$
U8$
U9$
U:$
0;$
U<$
U=$
U>$
U?$
0@$
UA$
UB$
0C$
UD$
0E$
UF$
UG$
UH$
UI$
UJ$
0K$
UL$
UM$
UN$
UO$
0P$
UQ$
UR$
0S$
UT$
0U$
UV$
UW$
UX$
UY$
UZ$
0[$
U\$
U]$
U^$
U_$
0`$
Ua$
Ub$
0c$
Ud$
0e$
Uf$
Ug$
Uh$
Ui$
Uj$
0k$
Ul$
Um$
Un$
Uo$
0p$
Uq$
Ur$
0s$
Ut$
0u$
Uv$
Uw$
Ux$
Uy$
Uz$
0{$
U|$
U}$
U!%
U"%
0#%
U$%
U%%
0&%
U'%
0(%
U)%
U*%
U+%
U,%
U-%
0.%
U/%
U0%
U1%
U2%
03%
U4%
U5%
06%
U7%
08%
U9%
U:%
U;%
U<%
U=%
0>%
U?%
U@%
UA%
UB%
0C%
UD%
UE%
0F%
UG%
0H%
UI%
UJ%
UK%
UL%
UM%
0N%
UO%
UP%
UQ%
UR%
0S%
UT%
UU%
0V%
UW%
0X%
UY%
UZ%
U[%
U\%
bUUUUUUUUUUUUUUUU ]%
b0000000000000001 ^%
b111111111111111U _%
bUUUUUUUUUUUUUUUU `%
b0000000000000001 a%
1b%
bUUUUUUUU c%
0d%
b000 e%
0f%
b00000000 g%
b000 h%
bUUU i%
1j%
0k%
0l%
Um%
1n%
0o%
0p%
Uq%
1r%
0s%
0t%
Uu%
1v%
0w%
bUUUUUUUU x%
bUUUUUUUU y%
1z%
0{%
b00000000 |%
bUUUUUUUU }%
1!&
0"&
0#&
U$&
1%&
0&&
bUUUUUUUUUUUUUUUU '&
bUUUUUUUUUUUUUUUU (&
1)&
0*&
bUUUUUUUUUUUUUUUU +&
bUUUUUUUUUUUUUUUU ,&
1-&
0.&
b0000000000000000 /&
bUUUUUUUUUUUUUUUU 0&
11&
02&
bUUUUUUUUUUUUUUUU 3&
bUUUUUUUUUUUUUUUU 4&
15&
06&
bUUUUUUUUUUUUUUUU 7&
bUUU 8&
bUUU 9&
bUUU :&
bUU ;&
bUUUU <&
bUUUUUU =&
bUUUUUUUUU >&
bUUUUUUUU ?&
1@&
0A&
bUUU B&
bUUU C&
bUUU D&
bUUUUUUUUUUUUUUUU E&
bUUUUUUUUUUUUUUUU F&
bUUUUUUUUUUUUUUUU G&
0H&
b0000000000000000 I&
bUUUUUUUUUUUUUUUU J&
0K&
1L&
bUUUUUUUUUUUUUUUU M&
bUUUUUUUUUUUUUUUU N&
bUUUUUUUUUUUUUUUU O&
0P&
0Q&
1R&
bUUUUUUUUU S&
bUUUUUUUUUUUUUUUU T&
0U&
bUUUUUUUUU V&
0W&
bUUUUUUUUUUUUUUUU X&
bUUUUUU Y&
0Z&
bUUUUUUUUUUUUUUUU [&
1\&
1]&
0^&
0_&
0`&
0a&
0b&
b00 c&
0d&
b00 e&
0f&
0g&
b00 h&
0i&
b00 j&
b00 k&
b00 l&
0m&
0n&
0o&
0p&
0q&
0r&
0s&
0t&
0u&
0v&
0w&
0x&
0y&
0z&
0{&
0|&
0}&
0!'
U"'
U#'
U$'
U%'
bUUUU &'
bUU ''
#5000000
0!
0"
0#
0$
0L
0j%
0n%
0r%
0v%
0z%
0!&
0%&
0)&
0-&
01&
05&
0@&
0L&
0R&
0\&
0]&
#10000000
1!
1#
1'
1(
1L
1O
1P
1j%
1n%
1r%
1v%
1z%
1!&
1%&
1)&
1-&
11&
15&
1@&
1A&
1L&
1P&
1R&
1\&
1`&
1a&
#15000000
0!
0#
0L
0j%
0n%
0r%
0v%
0z%
0!&
0%&
0)&
0-&
01&
05&
0@&
0L&
0R&
0\&
1`&
1a&
#20000000
1!
1#
1%
0'
0(
16
1L
1M
0O
0P
1^
bUUUUUUUUUUUUUUUU v
bUUUUUUUUUUUUUUUU z
U:"
bUUUUUUUUUUUUUUUU G"
bUUUUUUUUUUUUUUUU K"
1o"
bUUUUUUUUUUUUUUUU r"
Ut"
1j%
Ul%
1n%
1r%
1v%
1z%
1!&
1%&
1)&
1-&
bUUUUUUUUUUUUUUUU /&
11&
15&
1@&
0A&
bUUUUUUUUUUUUUUUU I&
1K&
1L&
0P&
1R&
1\&
1^&
0`&
0a&
1o&
#25000000
0!
0#
0L
0j%
0n%
0r%
0v%
0z%
0!&
0%&
0)&
0-&
01&
05&
0@&
0L&
0R&
0\&
1^&
1o&
#30000000
1!
1#
0%
1'
1(
06
1L
0M
1O
1P
0^
b0000000000000000 v
b0000000000000000 z
0:"
b0000000000000000 G"
b0000000000000000 K"
0o"
b0000000000000000 r"
0t"
1j%
0l%
1n%
1r%
1v%
1z%
1!&
1%&
1)&
1-&
b0000000000000000 /&
11&
15&
1@&
1A&
b0000000000000000 I&
0K&
1L&
1P&
1R&
1\&
0^&
1`&
1a&
0o&
#35000000
0!
0#
0L
0j%
0n%
0r%
0v%
0z%
0!&
0%&
0)&
0-&
01&
05&
0@&
0L&
0R&
0\&
1`&
1a&
#40000000
1!
1#
1%
0'
0(
16
1L
1M
0O
0P
1^
bUUUUUUUUUUUUUUUU v
bUUUUUUUUUUUUUUUU z
U:"
bUUUUUUUUUUUUUUUU G"
bUUUUUUUUUUUUUUUU K"
1o"
bUUUUUUUUUUUUUUUU r"
Ut"
1j%
Ul%
1n%
1r%
1v%
1z%
1!&
1%&
1)&
1-&
bUUUUUUUUUUUUUUUU /&
11&
15&
1@&
0A&
bUUUUUUUUUUUUUUUU I&
1K&
1L&
0P&
1R&
1\&
1^&
0`&
0a&
1o&
#45000000
0!
0#
0L
0j%
0n%
0r%
0v%
0z%
0!&
0%&
0)&
0-&
01&
05&
0@&
0L&
0R&
0\&
1^&
1o&
#50000000
1!
1#
0%
1'
1(
06
1L
0M
1O
1P
0^
b0000000000000000 v
b0000000000000000 z
0:"
b0000000000000000 G"
b0000000000000000 K"
0o"
b0000000000000000 r"
0t"
1j%
0l%
1n%
1r%
1v%
1z%
1!&
1%&
1)&
1-&
b0000000000000000 /&
11&
15&
1@&
1A&
b0000000000000000 I&
0K&
1L&
1P&
1R&
1\&
0^&
1`&
1a&
0o&
#55000000
0!
0#
0L
0j%
0n%
0r%
0v%
0z%
0!&
0%&
0)&
0-&
01&
05&
0@&
0L&
0R&
0\&
1`&
1a&
#60000000
1!
1#
1%
0'
0(
16
1L
1M
0O
0P
1^
bUUUUUUUUUUUUUUUU v
bUUUUUUUUUUUUUUUU z
U:"
bUUUUUUUUUUUUUUUU G"
bUUUUUUUUUUUUUUUU K"
1o"
bUUUUUUUUUUUUUUUU r"
Ut"
1j%
Ul%
1n%
1r%
1v%
1z%
1!&
1%&
1)&
1-&
bUUUUUUUUUUUUUUUU /&
11&
15&
1@&
0A&
bUUUUUUUUUUUUUUUU I&
1K&
1L&
0P&
1R&
1\&
1^&
0`&
0a&
1o&
#65000000
0!
0#
0L
0j%
0n%
0r%
0v%
0z%
0!&
0%&
0)&
0-&
01&
05&
0@&
0L&
0R&
0\&
1^&
1o&
#70000000
1!
1#
0%
1'
1(
06
1L
0M
1O
1P
0^
b0000000000000000 v
b0000000000000000 z
0:"
b0000000000000000 G"
b0000000000000000 K"
0o"
b0000